import os
from flask import Flask, render_template, request
from flask import send_from_directory
import tensorflow.keras as keras
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import tensorflow as tf
import tensorflow.keras.backend as K

app = Flask(__name__)
dir_path = os.path.dirname(os.path.realpath(__file__))
UPLOAD_FOLDER = 'uploads'
STATIC_FOLDER = 'static'
session = tf.compat.v1.Session()
graph = tf.compat.v1.get_default_graph()

with session.as_default():
	with graph.as_default():
  		 model = load_model(STATIC_FOLDER + '/' + 'model.h5')


def api(full_path):
    data = image.load_img(full_path, target_size=(224, 224, 3))
    data = image.img_to_array(data)
    data = np.expand_dims(data, axis=0)
    with session.as_default():
        with graph.as_default():
        	predicted = model.predict(data)
    return predicted

@app.route('/')
def home():
   return render_template('index.html')
@app.route('/upload', methods=['POST','GET'])
def upload_file():
    if request.method == 'GET':
        return render_template('index.html')
    else:
        file = request.files['image']
        full_name = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(full_name)
        indices = {0: 'Adialer.C', 1: 'Agent.FYI', 2: 'Allaple.A', 3: 'Allaple.L', 4: 'Alueron.gen!J',
                   5: 'Autorun.K', 6: 'C2LOP.P', 7: 'C2LOP.gen!g', 8: 'Dialplatform.B', 9: 'Dontovo.A',
                   10: 'Fakerean', 11: 'Instantaccess', 12: 'Lolyda.AA1', 13: 'Lolyda.AA2', 14: 'Lolyda.AA3',
                   15: 'Lolyda.AT', 16: 'Malex.gen!J', 17: 'Obfuscator.AD', 18: 'Rbot!gen', 19: 'Skintrim.N',
                   20: 'Swizzor.gen!E', 21: 'Swizzor.gen!I', 22: 'VB.AT', 23: 'Wintrim.BX', 24: 'Yuner.A'}
        result = api(full_name)
        predicted_class = np.argmax(result[0])
        accuracy = round(result[0][predicted_class] * 100, 2)
        label = indices[predicted_class]
    return render_template('predict.html', image_file_name = file.filename, label = label, accuracy = accuracy)
@app.route('/uploads/<filename>')
def send_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)
if __name__ == '__main__':
    app.debug = True
    app.run(debug=True)
    app.debug = True
